{"version":3,"file":"static/js/759.53e2c1d9.chunk.js","mappings":"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","sources":["../node_modules/@styled-icons/material-outlined/KeyboardBackspace/KeyboardBackspace.esm.js","common/components/BackArrowBlock/BackArrowBlock.tsx","features/Packs/LearnPack/LearnPackStyledComponents.ts","features/Packs/LearnPack/Grade/Grade.tsx","features/Packs/LearnPack/Answer/Answer.tsx","features/Packs/LearnPack/Question/Question.tsx","features/Packs/LearnPack/LearnPack.tsx"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { StyledIconBase } from '@styled-icons/styled-icon';\nexport var KeyboardBackspace = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(StyledIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 24 24\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M21 11H6.83l3.58-3.59L9 6l-6 6 6 6 1.41-1.41L6.83 13H21v-2z\"\n  }));\n});\nKeyboardBackspace.displayName = 'KeyboardBackspace';\nexport var KeyboardBackspaceDimensions = {\n  height: 24,\n  width: 24\n};","import React, {ButtonHTMLAttributes, DetailedHTMLProps, memo} from 'react';\r\nimport styled from \"styled-components\";\r\nimport {KeyboardBackspace} from \"@styled-icons/material-outlined\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {PATH} from \"common/components/Routes/AppRoutes\";\r\n\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> & {\r\n    path?: string\r\n    text?: string\r\n}\r\nexport const BackArrowBlock = memo(\r\n    ({\r\n         path = PATH.packs,\r\n         text = \"Back to Packs List\",\r\n         ...props\r\n     }: DefaultButtonPropsType) => {\r\n\r\n        const nav = useNavigate()\r\n        const backButtonHandler = () => nav(path)\r\n\r\n        return (\r\n            <StyledBackArrowBlock\r\n                onClick={backButtonHandler}\r\n                {...props}>\r\n                <KeyboardBackspace/>\r\n                {text}\r\n            </StyledBackArrowBlock>\r\n        )\r\n    }\r\n)\r\n\r\n\r\nconst StyledBackArrowBlock = styled.button`\r\n    font-family: \"Montserrat\", sans-serif;\r\n    font-weight: 400;\r\n    font-size: 14px;\r\n    line-height: 24px;\r\n\r\n    border: none;\r\n    width: 18vh;\r\n    height: 5vh;\r\n    background: transparent;\r\n    display: grid;\r\n    grid-template-columns: 2.5vh 1fr;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    z-index: 2;\r\n`","import {SCutString} from \"features/Packs/PacksStyledComponents\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const SSCutAnswerQuestionString = styled(SCutString)`\r\n    text-overflow: unset;\r\n    max-width: 450px;\r\n    white-space: unset;\r\n    @media (max-width: 526px) {\r\n        width: 80%;\r\n    }\r\n`\r\nexport const SGrade = styled.div`\r\n    display: grid;\r\n    padding-bottom: 2vh;\r\n`\r\nexport const SGradeOption = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 3vh 3fr;\r\n    align-items: center;\r\n\r\n    input {\r\n        height: 2vh;\r\n    }\r\n`","import React from \"react\";\r\nimport {SGrade, SGradeOption} from \"features/Packs/LearnPack/LearnPackStyledComponents\";\r\n\r\nconst grades = ['Did not know', 'Forgot', 'A lot of thought', 'Confused', 'Knew the answer'];\r\ntype PT = {\r\n    gradeChangeHandler: (grade: number) => void\r\n    grade: number\r\n    disabled: boolean\r\n}\r\nexport const Grade =\r\n    ({\r\n         grade,\r\n         gradeChangeHandler,\r\n         disabled\r\n     }: PT) => <SGrade>\r\n        <p>Rate yourself:</p>\r\n        {grades.map((g, i) => (\r\n            <SGradeOption key={i}>\r\n                <input\r\n                    disabled={disabled}\r\n                    type=\"radio\"\r\n                    id={g}\r\n                    value={i + 1}\r\n                    checked={i + 1 === grade}\r\n                    onClick={(e) => gradeChangeHandler(+e.currentTarget.value)}\r\n                />\r\n                <label\r\n                    htmlFor={g}\r\n                >\r\n                    {g}\r\n                </label>\r\n            </SGradeOption>\r\n        ))}\r\n    </SGrade>\r\n","import {Button} from \"common/components/Button/Button\";\r\nimport {Grade} from \"features/Packs/LearnPack/Grade/Grade\";\r\nimport React, {useState} from \"react\";\r\nimport {SImg} from \"features/Packs/PacksStyledComponents\";\r\nimport {Card} from \"features/Packs/Cards/cardsApi\";\r\nimport {SSCutAnswerQuestionString} from \"features/Packs/LearnPack/LearnPackStyledComponents\";\r\n\r\ntype PT = {\r\n    hideAnswer: () => void\r\n    nextButtonHandler: () => void\r\n    card?: Card\r\n    isControlDisabled: boolean\r\n}\r\nexport const Answer =\r\n    ({\r\n         hideAnswer,\r\n         card,\r\n         isControlDisabled,\r\n         nextButtonHandler\r\n     }: PT) => {\r\n        const [grade, setGrade] = useState(1)\r\n        return <>\r\n            <b>Answer: </b>\r\n            {card?.answerImg ? <SImg src={card?.answerImg}/> : <SSCutAnswerQuestionString>{card?.answer}</SSCutAnswerQuestionString>}\r\n            <Grade\r\n                disabled={isControlDisabled}\r\n                grade={grade}\r\n                gradeChangeHandler={setGrade}/>\r\n            <Button\r\n                onClick={hideAnswer}>\r\n                Hide Answer\r\n            </Button>\r\n            <Button\r\n                type={\"submit\"}\r\n                disabled={isControlDisabled}\r\n                onClick={nextButtonHandler}>\r\n                Next\r\n            </Button>\r\n        </>\r\n    }\r\n","import {SImg} from \"features/Packs/PacksStyledComponents\";\r\nimport {SHelperText} from \"common/components/CommonStyledComponents\";\r\nimport React from \"react\";\r\nimport {Button} from \"common/components/Button/Button\";\r\nimport {Card} from \"features/Packs/Cards/cardsApi\";\r\nimport {SSCutAnswerQuestionString} from \"features/Packs/LearnPack/LearnPackStyledComponents\";\r\n\r\ntype PT = {\r\n    card?: Card\r\n    hideQuestion: () => void\r\n}\r\nexport const Question = ({card, hideQuestion}: PT) => <>    \r\n    <b>Question: </b>\r\n    {card?.questionImg ? <SImg src={card?.questionImg}/> : <SSCutAnswerQuestionString>{card?.question}</SSCutAnswerQuestionString>}\r\n    <SHelperText>\r\n        Number of attempts to answer a question: {card?.shots}\r\n    </SHelperText>\r\n    <Button\r\n        onClick={hideQuestion}>\r\n        Show Answer\r\n    </Button>\r\n</>","import React, {useCallback, useLayoutEffect, useState} from 'react';\r\nimport {BackArrowBlock} from \"common/components/BackArrowBlock/BackArrowBlock\";\r\nimport {SPagesContainer, STitle} from \"common/components/CommonStyledComponents\";\r\nimport styled from \"styled-components\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Answer} from \"features/Packs/LearnPack/Answer/Answer\";\r\nimport {Question} from \"features/Packs/LearnPack/Question/Question\";\r\nimport {PATH} from \"common/components/Routes/AppRoutes\";\r\nimport {Card, useGetCardsQuery, useGradeCardMutation} from \"features/Packs/Cards/cardsApi\";\r\n\r\nconst getCard = (cards: Card[]) => {\r\n    const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n    const rand = Math.random() * sum;\r\n    const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n            const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n            return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n        }\r\n        , {sum: 0, id: -1});\r\n\r\n    return cards[res.id + 1];\r\n}\r\n\r\nexport default function LearnPack() {\r\n\r\n    const {cardsPack_id} = useParams()\r\n    const [card, setCard] = useState<Card | undefined>(undefined)\r\n    const [showAnswer, setShowAnswer] = useState(false)\r\n    const [grade, setGrade] = useState<1 | 2 | 3 | 4 | 5>(1)\r\n\r\n    const setShowAnswerFalse = useCallback(() => setShowAnswer(false),[setShowAnswer])\r\n\r\n    const {\r\n        data: packData,\r\n    } = useGetCardsQuery({\r\n        cardsPack_id,\r\n        sortCards: \"0grade\",\r\n        pageCount: 50,\r\n        page: 1\r\n    })\r\n\r\n    const [gradeCard, {\r\n        isLoading: isCardGrading,\r\n    }] = useGradeCardMutation()\r\n\r\n    const newCardSetter = useCallback(() => {\r\n        setGrade(1)\r\n        setShowAnswerFalse();\r\n        packData && setCard(getCard(packData.cards))\r\n    }, [packData])\r\n\r\n    useLayoutEffect(() => {\r\n        newCardSetter()\r\n    }, [newCardSetter]);\r\n\r\n    const nextButtonHandler = async () => {\r\n        await gradeCard({\r\n            card_id: card!._id,\r\n            grade\r\n        })\r\n        newCardSetter()\r\n    }\r\n    return (\r\n        <>\r\n            <BackArrowBlock\r\n                text={\"Back to pack\"}\r\n                path={`${PATH.cards}/${cardsPack_id}`}/>\r\n            <SSPagesContainer>\r\n                <SSTitle>Pack {\"packName\"}</SSTitle>\r\n                {showAnswer\r\n                    ? <Answer\r\n                        card={card}\r\n                        hideAnswer={setShowAnswerFalse}\r\n                        nextButtonHandler={nextButtonHandler}\r\n                        isControlDisabled={isCardGrading}/>\r\n                    : <Question\r\n                        card={card}\r\n                        hideQuestion={() => setShowAnswer(true)}/>\r\n                }\r\n            </SSPagesContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nconst SSPagesContainer = styled(SPagesContainer)`\r\n    display: grid;\r\n    grid-gap: 10px;\r\n    padding: 1vh;\r\n    height: 100%;\r\n`\r\nconst SSTitle = styled(STitle)`\r\n    justify-self: center;\r\n`\r\n\r\n\r\n"],"names":["KeyboardBackspace","React","props","ref","StyledIconBase","_extends","iconAttrs","iconVerticalAlign","iconViewBox","d","displayName","BackArrowBlock","memo","_ref","path","PATH","packs","text","nav","useNavigate","_jsxs","StyledBackArrowBlock","onClick","backButtonHandler","children","_jsx","styled","button","_templateObject","_taggedTemplateLiteral","SSCutAnswerQuestionString","SCutString","SGrade","div","_templateObject2","SGradeOption","_templateObject3","grades","Grade","grade","gradeChangeHandler","disabled","map","g","i","type","id","value","checked","e","currentTarget","htmlFor","Answer","hideAnswer","card","isControlDisabled","nextButtonHandler","setGrade","useState","_Fragment","answerImg","SImg","src","answer","Button","Question","hideQuestion","questionImg","question","SHelperText","shots","getCard","cards","sum","reduce","acc","rand","Math","random","res","newSum","LearnPack","cardsPack_id","useParams","setCard","undefined","showAnswer","setShowAnswer","setShowAnswerFalse","useCallback","data","packData","useGetCardsQuery","sortCards","pageCount","page","gradeCard","isLoading","isCardGrading","useGradeCardMutation","newCardSetter","useLayoutEffect","concat","SSPagesContainer","SSTitle","async","card_id","_id","SPagesContainer","STitle"],"sourceRoot":""}